<!doctype html>
<html class="no-js"
      lang="{{ request.locale.iso_code }}">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible"
        content="IE=edge">
  <meta name="viewport"
        content="width=device-width,initial-scale=1,viewport-fit=cover">
  <meta name="theme-color"
        content="{{ settings.color_1_bg }}">
  <link rel="canonical"
        href="{{ canonical_url }}">
  <link rel="preconnect"
        href="https://cdn.shopify.com"
        crossorigin>
  <link rel="preload"
        as="style"
        href="{{ 'tailwind.css' | asset_url }}">
  <link rel="preload"
        as="style"
        href="{{ 'custom.css' | asset_url }}">
  <link rel="preload"
        as="script"
        href="{{ 'theme.js' | asset_url }}">
  <link rel="preload"
        as="script"
        href="{{ 'custom.js' | asset_url }}">
  {% if request.design_mode %}
    <link rel="preload"
          as="script"
          href="{{ 'editor.js' | asset_url }}">
  {% endif %}

  {%- if settings.branding_favicon != blank -%}
    <link rel="icon"
          type="image/png"
          href="{{ settings.branding_favicon | image_url: width: 32, height: 32 }}">
  {%- endif -%}

  {% capture defaultTitle %}
    {{ page_title }}
    {%- if current_tags %} &ndash; tagged "{{ current_tags | join: ', ' }}"{% endif -%}
    {%- if current_page != 1 %} &ndash; Page {{ current_page }}{% endif -%}
    {%- unless page_title contains shop.name %} &ndash; {{ shop.name }}{% endunless -%}
  {% endcapture %}
  <title>
    {{ defaultTitle }}
  </title>
  {% if page_description %}
    <meta name="description"
          content="{{ page_description | escape }}">
  {% else %}
    <meta name="description"
          content="{{ defaultTitle | escape }}">
  {% endif %}

  {% render 'meta-tags' %}
  {% render '_translations' %}

  {{ content_for_header }}

  <script>
    window['missingImageAltTags'] = [];
  </script>
  <link rel="stylesheet"
        href="{{ 'tailwind.css' | asset_url }}">
  <link rel="stylesheet"
        href="{{ 'custom.css' | asset_url }}">
  <script type="module"
          src="{{ 'theme.js' | asset_url }}"
          defer></script>
  <script type="module"
          src="{{ 'custom.js' | asset_url }}"
          defer></script>

  {% if request.design_mode %}
    <script type="module"
            src="{{ 'editor.js' | asset_url }}"
            defer></script>
  {% endif %}

  <script type="application/json"
          data-color-swatches>{% render 'color-swatches.json' %}</script>

  {% for index in (1..5) %}
    {% liquid
      assign _font_family = 'font_family_' | append: index
      assign _font_weights = 'font_weights_' | append: index
      assign _font_custom_family = 'font_custom_family_' | append: index
      assign _font_custom_src = 'font_custom_src_' | append: index
    %}

    {% if settings[_font_custom_src] != blank %}
      {{ settings[_font_custom_src] }}
    {% endif %}

    {%- if settings[_font_custom_family] == blank and settings[_font_family].system? != true and settings[_font_family] != blank -%}
      <link rel="preload"
            as="font"
            href="{{ settings[_font_family] | font_url }}"
            type="font/woff2"
            crossorigin>
    {%- endif -%}
  {% endfor %}

  <script>
  {% if customer %}
    let customerTags = {{ customer.tags | json }};
  {% else %}
    let customerTags = [];
  {% endif %}
  </script>
  <script>
    window.customerTags = customerTags;
  </script>

  <script>
    let proDiscount = {{ settings.pro_discount | json }};
  </script>
  <script>
    window.proDiscount = proDiscount;
  </script>



  {% capture globalStyles %}
    {% render '_settings' %}
  {% endcapture %}
  <style>
    {{ globalStyles | strip_newlines  }}
    {% render '_font_variables', id: 'product_card__title__font', settings: settings, selector: 'product-card-title', no_style: true %}
    {% render '_font_variables', id: 'product_price', settings: settings, selector: 'product-price', no_style: true %}
    {% render '_font_variables', id: 'input_element', settings: settings, selector: 'input-element', no_style: true %}
    {% render '_font_variables', id: 'small_product_card__title__font', settings: settings, selector: 'product-card-title--small', no_style: true %}
    {% render '_font_variables', id: 'article_card_title', settings: settings, selector: 'article-card-title', no_style: true %}
    {% render '_font_variables', id: 'article_card_specs', settings: settings, selector: 'article-card-specs', no_style: true %}
    {% render '_font_variables', id: 'article_card_description', settings: settings, selector: 'article-card-description', no_style: true %}
    {% render '_font_variables', id: 'article_card_link', settings: settings, selector: 'article-card-link', no_style: true %}
    {% render '_font_variables', id: 'cart_title', settings: settings, selector: 'cart-title', no_style: true %}
    {% render '_font_variables', id: 'breadcrumbs', settings: settings, selector: 'breadcrumbs', no_style: true %}
    {% render '_font_variables', id: 'labels', settings: settings, selector: 'label-item', no_style: true %}

    {% if settings.beta_features__show %}
    {% render '_font_variables', id: 'nav_link', settings: settings, selector: 'nav-link', no_style: true %}
    {% render '_font_variables', id: 'megamenu_title', settings: settings, selector: 'megamenu-title', no_style: true %}
    {% render '_font_variables', id: 'megamenu_link', settings: settings, selector: 'megamenu-link', no_style: true %}
    {% render '_font_variables', id: 'megamenu_link_large', settings: settings, selector: 'megamenu-link--large', no_style: true %}
    {% render '_font_variables', id: 'megamenu_image_caption', settings: settings, selector: 'megamenu-image-caption', no_style: true %}
    {% endif %}
  </style>

  <link rel="preconnect"
        href="https://fonts.shopifycdn.com"
        crossorigin>
  {% comment %} TODO: Preload Fonts{% endcomment %}
  {% assign font_setting_names = 'font_body,font_button,font_heading_1,font_heading_2,font_heading_3,font_heading_4,font_heading_5,font_heading_6' | split: ',' %}
  {% for font_setting_name in font_setting_names %}
    {%- unless settings[font_setting_name].system? -%}
      {% if settings[font_setting_name] and settings[font_setting_name] != blank %}
        {% assign fontTest = settings[font_setting_name] | font_url %}
        {% if fontTest %}
          <link rel="preload"
                as="font"
                href="{{ settings[font_setting_name] | font_url }}"
                type="font/woff2"
                crossorigin>
        {% endif %}
      {% endif %}
    {%- endunless -%}
    {% assign custom_font_src = font_setting_name | append: "_custom_src" %}
    {% assign custom_font_name = font_setting_name | append: "_custom" %}
    {% if settings[custom_font_name] != blank and settings[custom_font_src] != blank %}
      {{ settings[custom_font_src] }}
    {% endif %}

  {% endfor %}

  <script>
    document.documentElement.className = document.documentElement.className.replace('no-js', 'js');
    if (Shopify.designMode) {
      document.documentElement.classList.add('shopify-design-mode');
    }
  </script>
  {% assign productSettingKeys = settings | where: 'product_card' %}

  {%- capture filterTag -%}
    {{- settings.custom_hide_condition -}}
  {%- endcapture -%}
  {% assign filterTag = filterTag | trim | strip_newlines %}

  {% capture globalSettings %}
    window.missingImageAltTags = [];
    window.shop = {% render '_json_static-gen-sloooow', input: shop, type: 'shop' %};
    window.routes = {
    ...{% render '_json_static-gen-sloooow', input: routes, type: 'routes' %},
    file_url: `{{ "" | file_url | split: "?" | first }}`,
    asset_url: `{{ "theme.js" | asset_url | split: "theme.js?" | first }}`,
    };
    window.request_path = {{ request.path | json }};
    window.template = {{ template | json }};
    window.theme_settings = {{ settings | json }};
    window.product_card_settings = {
    {% for key in productSettingKeys %}{{ key }}: {{ settings[key] | json }}{% unless forloop.last %},{% endunless %}{% endfor %}
    };
    window.cartData = {{ cart | json }};
    window.cartProductCollections = {
    {%- for item in cart.items -%}"{{ item.product.handle }}": {{ item.product.collections | map: 'handle' | json }}{%- unless forloop.last -%},{%- endunless -%}{%- endfor -%}
    };

    {%- capture filterTag -%}
      {{- settings.custom_hide_condition -}}
    {%- endcapture -%}
    {% assign filterTag = filterTag | trim | strip_newlines %}
    window.filterTag = {{ filterTag | json }} || "NOTAFilterTag";

    window.transformProducts = (product) => {
    if (product.tags.includes(window.filterTag)) {
    return {...product, hidden: true};
    };

    {% if customer.tags contains 'Society Member' and customer.tags contains 'Active Subscriber' %}
      {% assign isSocietyMember = true %}
      window.transformProducts = (product) => {
      const newProduct = window.structuredClone ? window.structuredClone(product) : { ...product };
      if (newProduct.tags?.includes("no-discount")) {
      return product;
      }
      const discount = 20; /* Percent */

      newProduct.variants = newProduct?.variants?.map((v) => ({
      ...v,
      compare_at_price: v.price,
      price: v.price - v.price * (discount / 100),
      }));
      newProduct.selected_or_first_available_variant = {
      ...newProduct?.selected_or_first_available_variant,
      compare_at_price: newProduct?.selected_or_first_available_variant?.price,
      price:
      newProduct?.selected_or_first_available_variant?.price -
      newProduct?.selected_or_first_available_variant?.price * (discount / 100),
      };
      newProduct.compare_at_price = newProduct?.price;
      newProduct.compare_at_price_min = newProduct?.price_min;
      newProduct.price = newProduct?.price - newProduct?.price * (discount / 100);
      newProduct.price_min = newProduct?.price_min - newProduct?.price_min * (discount / 100);

      return {
      ...newProduct,
      };
      };

    {% elsif product.tags contains "only-membership" %}
      window.location.href = '/';
    {% endif %}

    return product;
    };

  {% endcapture %}
  <script>
    {{ globalSettings }}
  </script>

  {% if customer.has_account %}
    {% case request.path %}
      {% when '/account/register' or '/account/register' or '/account/login' %}
        <script>
          window.location.href = `{{ request.origin }}{{ routes.account_url }}`;
        </script>
    {% endcase %}
  {% endif %}
</head>

<body class="min-h-screen text-theme-text bg-theme-bg bg-theme-gradient font-group-1 {{ settings.color_scheme }}"
      style="scroll-behavior:auto !important;"
      id="shopify-override">
  {% comment %}{% sections 'settings-group' %}{% endcomment %}
  {% section 'product-quick-view' %}
  {% section 'search' %}

  <header class="header-position top-0 z-40 bg-theme-bg"
          data-global-header>
    {% comment %}{% sections 'header-group' %}{% endcomment %}
    {% section 'cart-drawer' %}
    {% section 'gift-with-purchase' %}
    {% section 'header-koa' %}

    {% if settings.beta_features__show %}
      {% sections 'megamenu-group' %}
    {% endif %}

  </header>

  <main class="min-h-full">
    {{ content_for_layout }}
  </main>

  <footer class="relative z-50 bg-theme-bg"
          data-global-footer>
    {% comment %}{% sections 'footer-group' %}{% endcomment %}
    {% section 'footer' %}
  </footer>

  {% section 'product-data' %}
  {% section 'product-recommendations' %}

  {% comment %} Tooltip {% endcomment %}
  <div class="fixed z-[5000] opacity-0 transition-opacity pointer-events-none "
       style="top: -9999px; left: -9999px;"
       data-tooltip-display>
  </div>
  <div data-cart-side-effects></div>
  <div data-global-effects></div>
  {% if request.design_mode %}
    <div data-editor-root></div>
  {% endif %}

</body>
</html>

<!-- Begin Shopify-Afterpay JavaScript Snippet (v1.1.7) -->
{% if cart.currency.iso_code == shop.currency %}
<script type="text/javascript">
// Overrides:
// var afterpay_min = 1.00;       // As per your Afterpay contract.
// var afterpay_max = 2000.00;    // As per your Afterpay contract.
// var afterpay_msg_size = 'sm';  // Can be 'xs', 'sm', 'md' or 'lg'.
// var afterpay_bold_amount = true;
// var afterpay_logo_theme = 'colour';  // Can be 'colour', 'black' or 'white'.
var afterpay_msg_size = 'md';  // Can be 'xs', 'sm', 'md' or 'lg'.
var afterpay_logo_theme = 'black';  // Can be 'colour', 'black' or 'white'.
// var afterpay_modal_open_icon = true;
// var afterpay_hide_upper_limit = false;
// var afterpay_hide_lower_limit = true;
// var afterpay_show_if_outside_limits = true;
// var afterpay_cbt_enabled = false;
// var afterpay_apr_loans_available = false;
var afterpay_product_selector = '#product-selector__afterpay';

// var afterpay_product_integration_enabled = true;
// var afterpay_product_selector = '#product-price-selector';
// var afterpay_variable_price_fallback = false;
// var afterpay_variable_price_fallback_selector = '';
// var afterpay_variable_price_fallback_method = 'mutation';  // Can be 'mutation' or 'interval'.

// var afterpay_cart_integration_enabled = true;
// var afterpay_cart_static_selector = '#cart-subtotal-selector';
// var afterpay_variable_subtotal_fallback = false;
// var afterpay_variable_subtotal_fallback_selector = '';
// var afterpay_variable_subtotal_fallback_method = 'mutation'; // Can be 'mutation' or 'interval'.

// var afterpay_dynamic_cart_integration_enabled = false;
// var afterpay_dynamic_cart_selector = '.cart-drawer__footer .totals';
// var afterpay_dynamic_cart_observer_target = '#CartDrawer';

// var afterpay_footer_logo_enabled = true;
// var afterpay_footer_logo_format = 'icon';  // Can be 'icon', 'stacked' or 'logo'.
// var afterpay_footer_logo_theme = 'colour'; // Can be 'colour', 'black' or 'white'.
// var afterpay_footer_logo_background = 'border';  // Can be 'border' or 'transparent'.
// var afterpay_footer_logo_container = 'footer ul.payment-icons';
// var afterpay_footer_logo_template = '<li class="payment-icon"><object data="{logo_path}" type="image/svg+xml"></object></li>';

// Non-editable fields:
var afterpay_js_language = {{ localization.language.iso_code | slice: 0, 2 | json }};
var afterpay_js_country = {{ localization.country.iso_code | json }};
var afterpay_shop_currency = {{ shop.currency | json }};
var afterpay_cart_currency = {{ cart.currency.iso_code | json }};
var afterpay_shop_money_format = {{ shop.money_format | json }};
var afterpay_shop_permanent_domain = {{ shop.permanent_domain | json }};
var afterpay_theme_name = {{ theme.name | json }};
var afterpay_product = {{ product | json }};
var afterpay_current_variant = {{ product.selected_or_first_available_variant | json }};
var afterpay_cart_total_price = {{ cart.total_price | json }};
var afterpay_js_snippet_version = '1.1.7';
</script>
<script type="text/javascript" src="https://static.afterpay.com/shopify-afterpay-javascript.js"></script>
{% else %}
<!-- Afterpay disabled: {{ cart.currency.iso_code }} != {{ shop.currency }} -->
{% endif %}
<!-- End Shopify-Afterpay JavaScript Snippet (v1.1.7) -->

<!-- Start afterpay shadow-root style update -->
<script>

// Wait for page to be loaded
{% comment %} document.addEventListener("DOMContentLoaded", () => {
  // Get all elements with the tag name <square-placement>
  let squarePlacementElements = document.getElementsByTagName('square-placement');

  // If you want to access the first element with this tag name, you can do:
  var firstSquarePlacementElement = squarePlacementElements[0];

  let host = firstSquarePlacementElement;

  let sheet = new CSSStyleSheet();
  sheet.replaceSync('.afterpay-main-text { color: red; }');
  host.shadowRoot.adoptedStyleSheets = [sheet];
}); {% endcomment %}


</script>
<!-- End afterpay shadow-root style update -->